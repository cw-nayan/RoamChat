// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoamChatClient is the client API for RoamChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoamChatClient interface {
	//room CURDL
	ListRooms(ctx context.Context, in *ListRoomReq, opts ...grpc.CallOption) (*ListRoomResp, error)
	GetRoom(ctx context.Context, in *GetRoomReq, opts ...grpc.CallOption) (*Room, error)
	UpdateRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomResp, error)
	CreateRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error)
	// user CRUDL
	ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	//Messages CRUDL
	ListMessages(ctx context.Context, in *ListMsgReq, opts ...grpc.CallOption) (*ListMsgResp, error)
	GetMsg(ctx context.Context, in *GetMsgReq, opts ...grpc.CallOption) (*Message, error)
	UpdateMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgResp, error)
	CreateMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type roamChatClient struct {
	cc grpc.ClientConnInterface
}

func NewRoamChatClient(cc grpc.ClientConnInterface) RoamChatClient {
	return &roamChatClient{cc}
}

func (c *roamChatClient) ListRooms(ctx context.Context, in *ListRoomReq, opts ...grpc.CallOption) (*ListRoomResp, error) {
	out := new(ListRoomResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/listRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) GetRoom(ctx context.Context, in *GetRoomReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/getRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) UpdateRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/updateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomResp, error) {
	out := new(DeleteRoomResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/deleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) CreateRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/createRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	out := new(ListUserResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/listUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/updateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) ListMessages(ctx context.Context, in *ListMsgReq, opts ...grpc.CallOption) (*ListMsgResp, error) {
	out := new(ListMsgResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/listMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) GetMsg(ctx context.Context, in *GetMsgReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/getMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) UpdateMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/updateMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgResp, error) {
	out := new(DeleteMsgResp)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/deleteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roamChatClient) CreateMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.RoamChat/createMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoamChatServer is the server API for RoamChat service.
// All implementations should embed UnimplementedRoamChatServer
// for forward compatibility
type RoamChatServer interface {
	//room CURDL
	ListRooms(context.Context, *ListRoomReq) (*ListRoomResp, error)
	GetRoom(context.Context, *GetRoomReq) (*Room, error)
	UpdateRoom(context.Context, *Room) (*Room, error)
	DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomResp, error)
	CreateRoom(context.Context, *Room) (*Room, error)
	// user CRUDL
	ListUsers(context.Context, *ListUserReq) (*ListUserResp, error)
	GetUser(context.Context, *GetUserReq) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	CreateUser(context.Context, *User) (*User, error)
	//Messages CRUDL
	ListMessages(context.Context, *ListMsgReq) (*ListMsgResp, error)
	GetMsg(context.Context, *GetMsgReq) (*Message, error)
	UpdateMsg(context.Context, *Message) (*Message, error)
	DeleteMsg(context.Context, *DeleteMsgReq) (*DeleteMsgResp, error)
	CreateMsg(context.Context, *Message) (*Message, error)
}

// UnimplementedRoamChatServer should be embedded to have forward compatible implementations.
type UnimplementedRoamChatServer struct {
}

func (UnimplementedRoamChatServer) ListRooms(context.Context, *ListRoomReq) (*ListRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedRoamChatServer) GetRoom(context.Context, *GetRoomReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoamChatServer) UpdateRoom(context.Context, *Room) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedRoamChatServer) DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoamChatServer) CreateRoom(context.Context, *Room) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoamChatServer) ListUsers(context.Context, *ListUserReq) (*ListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedRoamChatServer) GetUser(context.Context, *GetUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRoamChatServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRoamChatServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRoamChatServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRoamChatServer) ListMessages(context.Context, *ListMsgReq) (*ListMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedRoamChatServer) GetMsg(context.Context, *GetMsgReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedRoamChatServer) UpdateMsg(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsg not implemented")
}
func (UnimplementedRoamChatServer) DeleteMsg(context.Context, *DeleteMsgReq) (*DeleteMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsg not implemented")
}
func (UnimplementedRoamChatServer) CreateMsg(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMsg not implemented")
}

// UnsafeRoamChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoamChatServer will
// result in compilation errors.
type UnsafeRoamChatServer interface {
	mustEmbedUnimplementedRoamChatServer()
}

func RegisterRoamChatServer(s grpc.ServiceRegistrar, srv RoamChatServer) {
	s.RegisterService(&RoamChat_ServiceDesc, srv)
}

func _RoamChat_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/listRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).ListRooms(ctx, req.(*ListRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/getRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).GetRoom(ctx, req.(*GetRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/updateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).UpdateRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/deleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).DeleteRoom(ctx, req.(*DeleteRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/createRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).CreateRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/listUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).ListUsers(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/getUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/updateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/deleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/createUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/listMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).ListMessages(ctx, req.(*ListMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/getMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).GetMsg(ctx, req.(*GetMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_UpdateMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).UpdateMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/updateMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).UpdateMsg(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_DeleteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).DeleteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/deleteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).DeleteMsg(ctx, req.(*DeleteMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoamChat_CreateMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoamChatServer).CreateMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoamChat/createMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoamChatServer).CreateMsg(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// RoamChat_ServiceDesc is the grpc.ServiceDesc for RoamChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoamChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoamChat",
	HandlerType: (*RoamChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listRooms",
			Handler:    _RoamChat_ListRooms_Handler,
		},
		{
			MethodName: "getRoom",
			Handler:    _RoamChat_GetRoom_Handler,
		},
		{
			MethodName: "updateRoom",
			Handler:    _RoamChat_UpdateRoom_Handler,
		},
		{
			MethodName: "deleteRoom",
			Handler:    _RoamChat_DeleteRoom_Handler,
		},
		{
			MethodName: "createRoom",
			Handler:    _RoamChat_CreateRoom_Handler,
		},
		{
			MethodName: "listUsers",
			Handler:    _RoamChat_ListUsers_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _RoamChat_GetUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _RoamChat_UpdateUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _RoamChat_DeleteUser_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _RoamChat_CreateUser_Handler,
		},
		{
			MethodName: "listMessages",
			Handler:    _RoamChat_ListMessages_Handler,
		},
		{
			MethodName: "getMsg",
			Handler:    _RoamChat_GetMsg_Handler,
		},
		{
			MethodName: "updateMsg",
			Handler:    _RoamChat_UpdateMsg_Handler,
		},
		{
			MethodName: "deleteMsg",
			Handler:    _RoamChat_DeleteMsg_Handler,
		},
		{
			MethodName: "createMsg",
			Handler:    _RoamChat_CreateMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roamchat.proto",
}
